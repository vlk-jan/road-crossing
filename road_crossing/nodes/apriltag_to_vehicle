#!/usr/bin/env python
import rospy
import tf2_ros
import tf2_geometry_msgs

from copy import deepcopy

from apriltag_ros.msg import AprilTagDetectionArray
from road_crossing_msgs.msg import injector_msgs


time_pub = 0

class ApriltagDetector:
    def __init__(self):
        # Vehicle data publisher
        self.pub = rospy.Publisher("/road_crossing/injector", injector_msgs, queue_size=10)

        # Vehicle data
        self.data = dict()
        self.data["x"] = 0
        self.data["y"] = 0
        self.data["x_dot"] = 0
        self.data["y_dot"] = 0
        self.data["x_ddot"] = 0
        self.data["y_ddot"] = 0
        self.data["time"] = 0
        self.prev_data = deepcopy(self.data)

        self.length = 2
        self.width = 1

        # Clear message
        self.clear_msg = injector_msgs()
        self.clear_msg.clear = True

    def publish(self):
        self.pub.publish(self.clear_msg)

        msg = injector_msgs()
        msg.clear = False
        msg.northing = self.data["x"]
        msg.easting = self.data["y"]
        msg.x_dot = self.data["x_dot"]
        msg.y_dot = self.data["y_dot"]
        msg.x_ddot = self.data["x_ddot"]
        msg.y_ddot = self.data["y_ddot"]
        msg.length = self.length
        msg.width = self.width

        self.pub.publish(msg)

def transform_pose(input_pose, from_frame, to_frame):
    tf_buffer = tf2_ros.Buffer()
    tf2_ros.TransformListener(tf_buffer)

    pose = tf2_geometry_msgs.PoseStamped()
    pose.pose = input_pose
    pose.header.frame_id = from_frame
    pose.header.stamp = rospy.Time.now()

    outpose = tf_buffer.transform(pose, to_frame, rospy.Duration(1))
    return outpose.pose

def main():
    global time_pub
    rospy.init_node("apriltag_detector")
    time_pub = rospy.Time.now()
    detector = ApriltagDetector()

    def callback(data):
    global time_pub
        if (rospy.Time.now() - time_pub) > rospy.Duration(1):
            detector.pub.publish(detector.clear_msg)
        for tag in data.detections:
            if tag.id[0] != 7:
                return
            new_pose = transform_pose(tag.pose.pose.pose, "pylon_camera_left", "body")
            if abs(new_pose.position.x) > 15 or abs(new_pose.position.y) > 15:
                return
            detector.prev_data = deepcopy(detector.data)
            detector.data["time"] = data.header.stamp.secs + data.header.stamp.nsecs * 1e-9
            detector.data["x"] = new_pose.position.x
            detector.data["y"] = new_pose.position.y
            if detector.data["time"] == detector.prev_data["time"]:
                return
            if abs(detector.data["x"] - detector.prev_data["x"]) > 1 or abs(detector.data["y"] - detector.prev_data["y"]) > 1:
                return
            if abs(detector.data["x"] - detector.prev_data["x"]) < 0.02 and abs(detector.data["y"] - detector.prev_data["y"]) < 0.02:
                return
            detector.data["x_dot"] = (detector.data["x"] - detector.prev_data["x"]) / (detector.data["time"] - detector.prev_data["time"])
            detector.data["y_dot"] = (detector.data["y"] - detector.prev_data["y"]) / (detector.data["time"] - detector.prev_data["time"])
            detector.data["x_ddot"] = (detector.data["x_dot"] - detector.prev_data["x_dot"]) / (detector.data["time"] - detector.prev_data["time"])
            detector.data["y_ddot"] = (detector.data["y_dot"] - detector.prev_data["y_dot"]) / (detector.data["time"] - detector.prev_data["time"])
            print(detector.data)
            detector.publish()
            time_pub = rospy.Time.now()

    rospy.Subscriber("/apriltag", AprilTagDetectionArray, callback)

    while not rospy.is_shutdown():
        rospy.spin()

if __name__ == "__main__":
    main()
